package vozila;

import teret.*;
import generickiNiz.*;

/**
 * 
 * @author emma
 * 
 * Zadatak 3 - klasa Voz, kao skup vozila (sa teretom), koristi Vagon (vagon koristi Teret)
 * Voz se sastoji od niza vozila. 
 * Stvara se prazan zadatog kapaciteta posle čega se 
 * vozila dodaju pojedinačno(greška je ako se voz preoptereti, tj. ako ukupna težina 
 * svih vozila i tereta premaši ukupnu vučnu silu vozila u vozu). 
 * Može da se dohvati broj vozila u vozu, da se proveri da li bi se voz preopteretio 
 * priključivanjem zadatog vozila i da se sastavi tekstualni opis voza koji sadrži 
 * tekstualne opise sadržanih vozila (jedno vozilo po redu). 
 *
 */
public class Voz extends Vozilo {
	
	private double kapacitetVoza; //izražen u tonama
	Skup<Vagon> vagoni = new Skup<Vagon>(); 
	
	private static int brojac = 0; //broji broj priključenih vagona
	
	public Voz() {
		super(t);
		super.vucnaSila = 0;
		this.kapacitetVagona = kapacitet;
		tereti = new Skup<Teret>();
	}
	
	

	public double getKapacitetVagona() {
		return kapacitetVagona;
	}



	public void setKapacitetVagona(double kapacitetVagona) {
		this.kapacitetVagona = kapacitetVagona;
	}


	public void addTeret(Teret t) {
		try {
			tereti.add(t);		
			
			if (this.ukupnaTezina() > this.kapacitetVagona)
				throw new Exception();
			
			brojac++;
		}
		catch(Exception e) {
			System.out.println("Greška! Prekoračenje kapaciteta! Teret " + 
								t.toString() + " je odbačen!");
			tereti.remove(brojac);
		}
	}
	
	@Override
	public double ukupnaTezina() {
		double tezina = this.tezinaVozila;
		for(Teret t : this.tereti) {
			tezina += t.getTezinaTereta();
		}
		return tezina;
	}

	@Override
	public String toString() {
		// opis vagona
		int i = 0;
		String opis = "V(" + this.ukupnaTezina() + " | ";
		for(Teret t : this.tereti) {
			opis += t.getTezinaTereta();
			i++;
			if(i < tereti.size())
				opis += ", ";
		}
		opis += ")";
		
		return opis; 
	}

}
